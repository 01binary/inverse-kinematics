% Forward Kinematics with Joint Matrices (Octave) - kuka.blend

% Define Joint Variables
shoulder = -0.53058;
bicep = 0.949459;
elbow = 0.031416;
forearm = 0.631809;
wrist = 0.897099;
palm = 0;

% Define Joint Frames
pkg load matgeom
Shoulder = ...
  createTranslation3d(0, 0, 0.203) * ...
  createRotationOz(shoulder);
Bicep = ...
  createTranslation3d(0.075, 0.0735, 0.13) * ...
  createRotationOy(bicep);
Elbow = ...
  createTranslation3d(0, -0.0055, 0.27) * ...
  createRotationOy(elbow);
Forearm = ...
  createTranslation3d(0.106, -0.068001, 0.09) * ...
  createRotationOx(forearm);
Wrist = ...
  createTranslation3d(0.187, -0.029, 0) * ...
  createRotationOy(wrist);
Palm = ...
  createTranslation3d(0.052, 0.029, 0) * ...
  createRotationOx(palm);
Tool = ...
  createTranslation3d(0.03, 0, 0);

% Forward Kinematics
EE = Shoulder * Bicep * Elbow * Forearm * Wrist * Palm * Tool

% Visualize in Blender
bpy.data.objects["EE"].matrix_world = Matrix([
  [],
  [],
  [],
  [0,0,0,1]
])
