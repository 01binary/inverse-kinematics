% Forward Kinematics with Matrices
pkg load matgeom

base = 0.4;
shoulder = 0.8;
elbow = -0.6;

Base = ...
  createTranslation3d(0, 0, 0) * ...
  createRotationOz(base) * ...
  createRotationOx(pi / 2);
Shoulder = ...
  createTranslation3d(-0.013, 0.11518, 0) * ...
  createRotationOz(shoulder);
Elbow = ...
  createTranslation3d(0.4173, 0, 0) * ...
  createRotationOz(elbow) * ...
  createTranslation3d(0.48059, 0, -0.023) * ...
  createRotationOz(0.959931) * ...
  createTranslation3d(0.305, 0, 0);

EE = Base * Shoulder * Elbow

% visualize a matrix
% bpy.data.objects["EE"].matrix_world = Matrix([])

% visualize a vector
% N = [ bpy.data.objects["EE"].location + Vector([]) * 0.2, bpy.data.objects["EE"].location ]
% O = [ bpy.data.objects["EE"].location + Vector([]) * 0.2, bpy.data.objects["EE"].location ]
% A = [ bpy.data.objects["EE"].location + Vector([]) * 0.2, bpy.data.objects["EE"].location ]